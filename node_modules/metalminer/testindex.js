(function () {
    'use strict';
    var request = require('request'),
        cheerio = require('cheerio'),
        async = require('async');

    var mm = module.exports = {};

    mm.getLyrics = function (metaInfo, callback) {
        async.parallel([
            function (callback) {
                getDarkLyrics(metaInfo, callback);
            },
            function (callback) {
                getSongLyrics(metaInfo, callback);
            },
            function (callback) {
                getMetalArchivesLyrics(metaInfo, callback);
            }
        ], function (err, results) {
            console.log(err);
            console.log(results);
        });
    };

    var getWikipediaBandInfo = function (metaInfo, callback) {
        if (!metaInfo || !callback) {
            return;
        }
        var uri = 'http://www.google.com/search?q=' + metaInfo.artist.replace(/ /g, '+') + '+band+site:en.wikipedia.org';
        uri = encodeURI(uri);
        request({ uri: uri, headers: { 'User-Agent': 'metalminer/0.1 (http://jooon.mooo.com:8088; jon.asplund@gmail.com)'} }, function (err, res, body) {
            if (err) {
                callback('Request error.', { caller: that });
                return;
            }
            var $ = cheerio.load(body, { ignoreWhitespace: true });
            var link = $('body h3 a')[0];
            if (!link || !link.attribs || !link.attribs['href']) {
                callback('Malformed response from google.', { caller: that });
                return;
            }
            var linkhref = link.attribs['href'];
            linkhref = linkhref.replace('en.wikipedia.org', 'en.mobile.wikipedia.org').replace('/url?q=', '').replace(/&amp;sa=.*/, '');
            request({ uri: linkhref, headers: { 'User-Agent': 'metalminer/0.1 (http://jooon.mooo.com:8088; jon.asplund@gmail.com)'} }, function (err, res, body) {
                if (err) {
                    callback('Request error.', { caller: that });
                    return;
                }
                var $ = cheerio.load(body, { ignoreWhitespace: true });
                if ($('h1').text().toLowerCase().indexOf(metaInfo.artist.toLowerCase()) < 0) {
                    callback('Band does not have a wikipedia entry.', { caller: that });
                    return;
                }
                var content = $('#content');
                $('.section').each(function (i, item) {
                    var itemText = $(item).text().toString();
                    if (itemText &&
                        itemText.match(/^[References|Read in another language|External links|Bibliography]/i)) {
                        $(item).remove();
                    }
                });
                //$('.metadata').remove();
                var html = content.html().replace(/Jump back a section/g, '');
                callback(null, { caller: that, data: html });
            });
        });
    }

    var getDarkLyrics = function (metaInfo, callback) {
        if (!metaInfo || !callback) {
            return;
        }
        var that = this;
        var uri = 'http://www.darklyrics.com/lyrics/';
        var artist = metaInfo.artist.toLowerCase().replace(/[^a-z]/gi, '');
        var album = metaInfo.album.toLowerCase().replace(/[^a-z]/gi, '');
        var title = metaInfo.title.toLowerCase().replace(/[^a-z]/gi, '');
        uri += artist + '/' + album + '.html';
        request(uri, function (err, res, body) {
            var $ = cheerio.load(body, { ignoreWhitespace: true }),
                $albumlyrics = $('.lyrics'),
                albumlyrics = $albumlyrics.html(),
                $songtitles = $albumlyrics.find('h3'),
                songnr = -1;
            $songtitles.each(function (key) {
                if (this.text().toLowerCase().replace(/[^a-z]/gi, '') === title) {
                    songnr = key;
                    return false;
                }
            });
            if (songnr === -1) {
                callback('Song or album not found.', { caller: that });
            } else {
                var songlyrics = albumlyrics.split(/<h3>\s*<a name=".*">.*<\/h3>/);
                if (songlyrics.length < songnr + 1) {
                    callback('Unknown error.', { caller: that });
                } else {
                    callback(null, { caller: that, data: songlyrics[songnr + 1].trim() });
                }
            }
        });
    };

    var getMetalArchivesLyrics = function (metaInfo, callback) {
        if (!metaInfo || !callback) {
            return;
        }
        var that = this;
        var uri = 'http://www.metal-archives.com/search/ajax-advanced/searching/songs/?';
        uri += 'songTitle=' + metaInfo.title.replace(/^[0-9]{2,3} - /, '') + '&';
        uri += 'bandName=' + metaInfo.artist + '&';
        uri += 'releaseTitle=' + metaInfo.album;
        uri = uri.replace(/ /g, '+');
        request(uri, function (err, res, body) {
            if (err) {
                callback('Request error.', { caller: that });
                return;
            }
            try {
                body = JSON.parse(body);
            } catch (e) {
                callback('Did not get JSON response.', { caller: that });
                return;
            }
            if (body.error !== '' || parseInt(body.iTotalDisplayRecords, 10) < 1) {
                callback('Band, album or song not found.', { caller: that });
                return;
            }
            if (body.aaData.length > 0 && body.aaData[0].length > 4) {
                var link = body.aaData[0][4];
                var match = link.match(/id="lyricsLink_(.*?)"/)[1];
                var href = 'http://www.metal-archives.com/release/ajax-view-lyrics/id/' + match;
                request(href, function (err, res, body2) {
                    if (err) { callback('Request error.', { caller: that }); }
                    if (typeof callback === 'function') {
                        callback(null, { caller: that, data: body2.trim() });
                    }
                });
            }
        });
    };

    var getSongLyrics = function (metaInfo, callback) {
        if (!metaInfo || !callback) {
            return;
        }
        var that = this;
        var uri = 'http://www.songlyrics.com/' + metaInfo.artist.toLowerCase().replace(/ /gi, '-') + '/';
        uri += metaInfo.title.toLowerCase().replace(/^[0-9]{2,3} - /, '').replace(/ /gi, '-') + '-lyrics';
        request(uri, function (err, res, body) {
            if (err) {
                callback('Unknown error.', { caller: that });
                return;
            }
            var $ = cheerio.load(body, { ignoreWhitepace: true });
            $('script').remove();
            if ($('#songLyricsDiv').length === 0) {
                callback('Song not found.', { caller: that });
            } else {
                if ($('#songLyricsDiv').children().length > 0 &&
                    $('#songLyricsDiv').text().indexOf('Sorry, we have no') < 0) {
                    callback(null, { caller: that, data: $('#songLyricsDiv').html().trim() });
                } else {
                    callback('Could not find lyrics.', { caller: that });
                }
            }
        });
    };

    var getMetalArchivesSimilarArtist = function (metaInfo, callback) {
        if (!metaInfo || !callback) {
            return;
        }
        var that = this;
        var uri = 'http://www.metal-archives.com/search/ajax-advanced/searching/albums/?bandName=';
        uri += metaInfo.artist.replace(/ /gi, '+') + '&releaseTitle=' + metaInfo.album.replace(/ /gi, '+');
        request.get(uri, function (err, res, body) {
            if (err) {
                callback('Request error', { caller: that });
                return;
            }
            try {
                body = JSON.parse(body);
            } catch (e) {
                callback('Did not get JSON response.', { caller: that });
            }
            if (body.error !== '' || parseInt(body.iTotalDisplayRecords, 10) < 1) {
                callback('Not found.', { caller: that });
                return;
            }
            if (body.aaData.length > 0 && body.aaData[0].length > 0) {
                var link = body.aaData[0][0];
                var match = link.match(/(?:\/bands\/.*?\/)(.*?)(?:">)/)[1];
                var uri2 = 'http://www.metal-archives.com/band/ajax-recommendations/id/';
                uri2 += match;
                request.get(uri2, function (err, res, body) {
                    if (err) {
                        callback('Request error.', { caller: that });
                        return;
                    }
                    var match, regex = /(?:\/bands\/)([^\/]*)(?:\/)/gi;
                    var bands = [];
                    while ((match = regex.exec(body)) !== null) {
                        bands.push(match[1].replace(/_/gi, ' '));
                    }
                    if (bands.length > 0) {
                        callback(null, { caller: that, data: bands });
                    } else {
                        callback('Band not found or no similar bands found.', { caller: that });
                    }
                });
            }
        });
    };
})();